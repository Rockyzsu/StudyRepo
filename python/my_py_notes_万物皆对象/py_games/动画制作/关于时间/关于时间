就是让我们的动画基于时间运作,
我们需要知道上一个画面到现在经过了多少时间,
然后我们才能决定是否开始绘制下一幅.
pygame.time模块给我们提供了一个Clock的对象,
使我们可以轻易做到这一些：
    clock = pygame.time.Clock()     # 初始化了一个Clock对象
    time_passed = clock.tick()      # 返回一个上次调用的时间(以毫秒计)
    time_passed = clock.tick(30)

    第三行非常有用,在每一个循环中加上它,那么给tick方法加上的参数就成为了游戏绘制的最大帧率,
    这样的话,游戏就不会用掉你所有的CPU资源了！但是这仅仅是'最大帧率', 并不能代表用户看到的就是这个数字,
    有些时候机器性能不足, 或者动画太复杂, 实际的帧率达不到这个值, 我们需要一种更有效的手段来控制我们的动画效果

    为了使得在不同机器上有着一致的效果, 我们其实是需要给定物体
    (我们把这个物体叫做精灵,Sprite)恒定的速度.这样的话,从起点到终点的时间点是一样的,最终的效果也就相同了,
    所差别的,只是流畅度.

    使用时间控制来完成一致的动画效果