## 数据完整性
* 一个数据库就是一个完整的业务单元，可以包含多张表，数据被存储在表中
* 在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，
  为表添加一些强制性的验证，包括数据字段的类型、约束
## mysql的数据类型
```
mysql的数据类型分为四大类型: 
    整数, 
    浮点数类型, 
    时间和日期类型, 
    字符串类型, 
    二进制类型
```
## 一, 整数与浮点数类型
#### 1.整数类型
![](./images/01.png)
#### 2.浮点数类型和精准数据类型
![](./images/02.png)
```html
* 注意：DECIMAL(M, D) 精准数据类型：
    M 表示：数据的有效总长度(不包括小数点)；
    
    D 表示：小数位精度，按四舍五入计算

如果使用时没有指定参数，则默认参数为 (10, 0)
```
## 二, 日期和时间类型
![](./images/03.png)

## 三, 字符串类型
![](./images/04.png)

## 四, 二进制类型
![](./images/05.png)

![](./images/06.png)

## 约束
约束是在表中定义的用于维护数据库完整性的一些规则, 通过为表中的列定义约束可以防止将错误的数据插入表中, 也可以保持表之间数据的一致性
![](./images/07.png)

#### 主键和外键的设置意义：
主键和外键是把多个表组织为一个有效的关系数据库的粘合剂。主键和外键的设计对物理数据库的性能和可用性都有着决定性的影响。

主键在物理层面上只有两个用途：
```
1. 惟一地标识一行。
2. 作为一个可以被外键有效引用的对象。
```

外键是用来和其他表建立联系用的：
```
1. 这个表中的一列和另外一个表中的一列相同，为了让这两个表联系起来，就把其中一个表中的列设成外键，把另外一个表列设成主键，就实现了这两个表的关联。
2. 这样两个表之间不仅可以互相访问，而且也保证了数据的完整性。
3. 外键可以用来对关系字段进行约束，当为关系字段填写值时，会到关联的表中查询此值是否存在，如果存在则填写成功，如果不存在则填写失败并抛出异常。
```
![](./images/08.png)

![](./images/09.png)

![](./images/逻辑删除.png)

## 创建数据库
![](./images/create_database2.png)

![](./images/tmp.png)

![](./images/转储数据库.png)