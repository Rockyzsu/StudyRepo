## 事务
* 事务(Transaction)是并发控制的基本单位。
* 所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。
* 例如，银行转帐工作：从一个帐号扣款并使另一个帐号增款，这两个操作要么都执行，要么都不执行。所以，应该把他们看成一个事务。
* 事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性

## 为什么要有事务
* 事务广泛的运用于订单系统、银行系统等多种场景
* 例如：A用户和B用户是银行的储户，现在A要给B转账500元，那么需要做以下几件事：
    * 检查A的账户余额>500元；
    * A账户扣除500元；
    * B账户增加500元；
* 正常的流程走下来，A账户扣了500，B账户加了500，皆大欢喜。那如果A账户扣了钱之后，系统出故障了呢？A白白损失了500，而B也没有收到本该属于他的500。以上的案例中，隐藏着一个前提条件：A扣钱和B加钱，要么同时成功，要么同时失败。事务的需求就在于此

## 事务四大特性(简称ACID)
* 原子性(Atomicity)：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行
* 一致性(Consistency)：几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致
* 隔离性(Isolation)：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的
* 持久性(Durability)：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障

## 事务命令
* 要求：表的引擎类型必须是innodb类型才可以使用事务，这是mysql中表的默认引擎
* 查看表的创建语句，可以看到engine=innodb
```sql
show create table students;
```
* 开启事务: 执行insert, upadte, delete语句时, 变更会维护到本地缓存中, 而不会维护到物理表中
```sql
begin;
```
* 提交事务: 将缓存中的数据变更维护到物理表中
```sql
commit;
```
* 回滚事务: 放弃缓存中变更的数据
```sql
rollback;
```
#### 示例1：提交
步骤1：打开两个终端，连接mysql，使用同一个数据库，操作同一张表

* 终端1
```sql
select * from students;
```

* 终端2：开启事务，插入数据
```sql
begin;
insert into students(sname) values('张飞');
```
步骤2
* 终端1：查询数据，发现并没有新增的数据
```sql
select * from students;
```
步骤3
* 终端2：完成提交
```sql
commit;
```
* 终端1：查询，发现有新增的数据
```sql
select * from students;
```
#### 示例2：回滚
步骤1：打开两个终端，连接mysql，使用同一个数据库，操作同一张表
* 终端1
```sql
select * from students;
```
* 终端2
```sql
begin;
insert into students(sname) values('张飞');
```
步骤2
* 终端1：查询数据，发现并没有新增的数据
```sql
select * from students;
```
步骤3
* 终端2：完成回滚
```sql
rollback;
```
* 终端1：查询数据，发现没有新增的数据
```sql
select * from students;
```


