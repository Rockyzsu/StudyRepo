## 查询
* 查询所有列
```sql
select * from 表名;
```
* 查询指定列
可以使用as为列或表指定别名
```sql
select 列1, 列2, ... from 表名;
```
* 消除重复行
    * 在select 后面呢列前面使用distinct可以消除重复行
```sql
select distinct 列1, ... from 表名;
例:
select distinct gender from students;
```
#### 模糊查询
* like 
* %表示任意多个任意字符
* _表示一个任意字符
* 例: 查询姓黄的学生
```sql
select * from students where sanme like '%黄%';
```
* 例: 查询姓黄并且名字只有一个字的学生
```sql
select * from students where sname like '黄_';
```
* 例：查询姓黄或叫靖的学生
```sql
select * from students where sname like '黄%' or sname like '%靖';
```
#### 范围查询
* in表示在一个非连续的范围内
* 例: 查询编号是1或3或8的学生
```sql
select * from students where id in(1, 3, 8);
```
* between ... and ... 表示在一个连续的范围内
* 例: 查询学生是3至8的学生
```sql
select * from students where id between 3 and 8; 
```
#### 空值查询
* 注意：null与''是不同的
* 判空is null
* 例：查询没有填写地址的学生
```sql
select * from students where hometown is null;
```
* 判非空is not null 
* 判空is null
* 例: 查询没有填写地址的学生
```sql
select * from students where hometown is not null;
```
##### 优先级
优先级由高到低的顺序为：小括号，not，比较运算符，逻辑运算符
and比or先运算，如果同时出现并希望先算or，需要结合()使用

#### 分组
* 按照字段分组，表示此字段相同的数据会被放到一个组中
* 分组后，分组的依据列会显示在结果集中，其他列不会显示在结果集中
* 可以对分组后的数据进行统计，做聚合运算
* 语法：
```sql
select 列1,列2,聚合... from 表名 group by 列1,列2...
```
* 例: 查询男女生总数
```sql
select gender as 性别,count(*)
from students
group by gender;
```
* 例：查询各城市人数
```sql
select hometown as 家乡,count(*)
from students
group by hometown;
```
##### 分组后的数据筛选
* 语法: 
```sql
select 列1, 列2, 聚合... from 表名
group by 列1, 列2, 列3...
having 列1, ...聚合...
```
* having后面的条件运算符与where的相同
* 例：查询男生总人数
```SQL
方案一
select count(*) from students where gender=1;
-----------------------------------
方案二:
select gender as 性别,count(*)
from students
group by gender
having gender=1;
```
##### 对比where与having
* where是对from后面指定的表进行数据筛选，属于对原始数据的筛选
* having是对group by的结果进行筛选
##### with rollup
与 with rollup 一起使用(在表最后加入一个查询的数据的总和行)；
```SQL
select hometown as 家乡,count(*)
from students
group by hometown
with rollup;
```

#### 排序
* 为了方便查看数据, 可以对数据进行排序
* 语法: 
```SQL
select * from 表名
order by 列1 asc|desc,列2 asc|desc,...
```
* 将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推
* 默认按照列值从小到大排列
* asc从小到大排列，即升序
* desc从大到小排序，即降序

#### 分页查询
* 当数据量过大时, 在一页中查看数据是一件非常麻烦的事
* 语法：
```SQL
select * from 表名
limit start, count
```
* 从start开始，获取count条数据
* start索引从0开始
* 例：查询前3行男生信息
```sql
select * from students
where gender=1
limit 0,3;
```