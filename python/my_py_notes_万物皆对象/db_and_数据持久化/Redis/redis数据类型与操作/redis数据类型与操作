## redis 基本数据类型
* redis是key-value的数据结构, 每条数据都是一个键值对
* 不管是键名还是值都是字符串, 即redis存储的一切数据, 基于的都是字符串

redis支持5种数据类型:
![](./images/tmp1.png)

## 基本使用(必须掌握)
#### string 字符串
string是redis最基本的类型，一个key对应一个value。

string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象。

string类型是Redis最基本的数据类型，一个键最大能存储512MB。
```
redis 127.0.0.1:6379> set name "itcast"
OK
redis 127.0.0.1:6379> get name
"itcast"
```
在上面的例子中，set 和 get 是 Redis string命令，name 和 itcast 是存储在 Redis 的键和字符串值。

#### Hash 哈希

Redis hash 是一个键值对集合。

Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
```
127.0.0.1:6379> hset my_hash age "18" 
(integer) 1
127.0.0.1:6379> hset my_hash age
"18"

127.0.0.1:6379> hmset my_hash_table username "itcast" age "18" gender "male"
OK
127.0.0.1:6379> hget my_hash_table age
"18"

127.0.0.1:6379> hgetall my_hash_table
1) "username"
2) "itcast"
3) "age"
4) "18"
5) "gender"
6) "male"
```
在上面的例子中，哈希数据类型用于存储包含用户基本信息的用户对象。

这里 hset，hmset，hget，hgetall 是 Redis HASHES命令, 同时 my_hash 、my_hash_table 都是键。

#### List 列表
Redis 列表是简单的字符串列表，按照插入顺序排序，可以选择添加一个元素到列表的头部（左边）或者尾部（右边）。
```
# 先插入的数据的在尾部（列表右边）
lpush key value [value ...]

# 先插入的数据的在头部（列表左边）
rpush key value [value ...]

# 查看列表数据，并指定区间
lrange key start stop
```

* mylist1 of lpush （从头部插入数据）
```
redis 127.0.0.1:6379> lpush my_list1 "mysql"
(integer) 1
redis 127.0.0.1:6379> lpush my_list1 "redis"
(integer) 2
redis 127.0.0.1:6379> lpush my_list1 "mongodb"
(integer) 3
redis 127.0.0.1:6379> lrange my_list1 0 -1

1) "mongodb"
2) "redis"
3) "mysql"
```
* mylist2 of rpush（从尾部插入数据）
```
127.0.0.1:6379> rpush mylist2 mysql
(integer) 1
127.0.0.1:6379> rpush mylist2 redis
(integer) 2
127.0.0.1:6379> rpush mylist2 mongodb
(integer) 3

127.0.0.1:6379> lrange mylist2 0 -1
1) "mysql"
2) "redis"
3) "mongodb"
```
列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。

#### Set 集合
Redis Set是string类型的无序集合。

集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。

在 Redis 可以添加，删除和测试成员存在的时间复杂度为 O（1）。
```
127.0.0.1:6379> sadd myset1 "mysql"
(integer) 1
127.0.0.1:6379> sadd myset1 "redis"
(integer) 1
127.0.0.1:6379> sadd myset1 "mongodb"
(integer) 1
127.0.0.1:6379> sadd myset1 "redis"
(integer) 0

127.0.0.1:6379> smembers myset1
1) "mongodb"
2) "redis"
3) "mysql"
```
注：在上面的例子中 mysql 被添加两次，但由于它是只集合,具有唯一特性。

集合中最大的成员数为 2^32 - 1(4294967295, 每个集合可存储40多亿个成员)。

#### zset(sorted set：有序集合)
Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。

不同的是每个元素都会关联一个double类型的分数(权重)。redis正是通过分数来为集合中的成员(权重)进行从小到大的排序。

zset的成员是唯一的,但分数(score)却可以重复。
```
127.0.0.1:6379> zadd mysortset 0 "mysql"
(integer) 1
127.0.0.1:6379> zadd mysortset 2 "mongodb"
(integer) 1
127.0.0.1:6379> zadd mysortset 1 "redis"
(integer) 1
127.0.0.1:6379> zrangebyscore mysortset 0 2
1) "mysql"
2) "redis"
3) "mongodb"
```
### 键操作

#### keys * ：查看所有键
```
redis 127.0.0.1:6379> keys *
1) "key1..."
2) "key2..."
3) "key3..."
4) "key4..."
...
```
#### 使用通配符 *：查看名称中包含a的键
```
redis 127.0.0.1:6379> keys '*a*'
1) "a"
2) "keya"
3) "akey"
4) "kay"
...
```
#### exists 查看验证键是否存在：
* 键存在：(integer) 1
* 键不存在： (integer) 0
```
redis 127.0.0.1:6379> exists name
(integer) 1
```
* type 查看键对应的值的数据类型：
* 键存在：数据类型名
* 键不存在：none
```
127.0.0.1:6379> type myset
set
```
* del 删除键值：删除这个 key 及对应的 value
    * 键存在：(integer) 1
    * 键不存在：(integer) 0
```
redis 127.0.0.1:6379> del name
(integer) 1
```
#### 全部数据类型相关操作指令在[官方文档](http://redis.cn/commands.html)有详细介绍