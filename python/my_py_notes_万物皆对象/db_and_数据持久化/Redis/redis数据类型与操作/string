## string
```html
String 是redis最基本的类型，value 不仅可以是字符/字符串，也可以是数字。

string类型是二进制安全的。意思是redis的string可以包含任何数据,比如jpg图片或者序列化的对象

string类型是Redis最基本的数据类型，一个键最大能存储512MB。
```

## 命令使用:
#### 1. set: 创建／修改 一个键值对
```html
设置key对应的值为string类型的value，如果值存在则修改值
```
```html
127.0.0.1:6379> set name "itcast"
OK
```
#### 2. get ­­：获取 一个键值对的值
```
获取一个key的值，如果对应key不存在，则对应返回nil。
```
```
127.0.0.1:6379> get name
"itcast"
127.0.0.1:6379> get nana
(nil)
```
#### 3. setnx ­：创建一个键值对（key存在则不执行）
```
将key设置值为value，如果key不存在，则执行；当key存在时，什么也不做。SETNX是”SET if Not eXists”的简写。
```
```
127.0.0.1:6379> get name
"itcast"

127.0.0.1:6379> setnx name "itheima"
(integer) 0
127.0.0.1:6379> get name
"itcast"
```
#### 4. setex ­­: 创建/修改 一个键值对 并设置时限
```
设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期。
```
```
127.0.0.1:6379> setex color 5 "red"
127.0.0.1:6379> get color
"red"

....5秒后...

127.0.0.1:6379> get color
(nil)
```
#### 5. mset : 创建/修改 多个键值对
```
一次设置多个key的值,成功返回ok表示所有的值都设置了,失败返回0表示没有任何值被设置。
```
```
127.0.0.1:6379> mset key1 "Python" key2 "C++"
OK
```
#### 6. mget ­­: 获取 多个键值对的值
```
一次获取多个key的值,如果对应key不存在,则对应返回nil。
```
```
127.0.0.1:6379> mget key1 key2 key3
1) "Python"
2) "C++"
3) (nil)
```
#### 7. msetnx : 创建多个键值对（任意key存在则不执行）
```
对应给定的keys到他们相应的values上。只要有一个key已经存在，MSETNX一个操作都不会执行。
```
```
127.0.0.1:6379> msetnx key2 "Hello" key3 "World"
(integer) 0
```
* 认证了 MSETNX 是原子的，所以所有给定的keys是一次性set的

#### 8. getset ­: 获取一个键值对的值，并修改
```
设置key的值，并返回key的旧值
```
```
127.0.0.1:6379> get name
"itcast"
127.0.0.1:6379> getset name "itheima"
"itcast"
127.0.0.1:6379> get name
"itheima"
```
#### 9. setrange：指定位置向后覆盖 一个键值对的值
```
覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。
```
```
127.0.0.1:6379> set email "maozhaojun@live.com"
OK
127.0.0.1:6379> setrange email 11 "itcast.cn"
(integer) 20
127.0.0.1:6379> get email
"maozhaojun@itcast.cn"
127.0.0.1:6379> strlen email
(integer) 20
```
其中的11是指从下标为11(包含11)的字符开始替换

#### 10. GETRANGE ：指定区间获取一个键值对的值
```
GETRANGE key start end 获取指定key的value值的子字符串。是由start和end位移决定的
```
```
127.0.0.1:6379> get name
"itheima"
127.0.0.1:6379> getrange name 1 3
"the"
```
#### 11. incr ­­
```
increment，对key的值做 加1 操作，该值必须为整数；key不存在时候会设置key，并默认原来的value值为 0
```
```
127.0.0.1:6379> set age "100"
OK
127.0.0.1:6379> incr age 
(integer) 101
127.0.0.1:6379> get age
"101"

127.0.0.1:6379> incr nage
(integer) 1
127.0.0.1:6379> get nage
"1"
```
#### 12. incrby ­­
```
同incr类似，加指定值；key不存在时候会设置key，并默认原来的value值为 0。
```
```
127.0.0.1:6379> get age
"101"
127.0.0.1:6379> incrby age "10"
(integer) 111
127.0.0.1:6379> get age
"111"

127.0.0.1:6379> incrby ibage "10"
(integer) 10
127.0.0.1:6379> get ibage
"10"
```
#### 13. decr ­­
```
decrement，对key的值做 减1 操作，该值必须为整数；key不存在时候会设置key，并默认原来的value值为 0。
```
```
127.0.0.1:6379> decr age
(integer) 110
127.0.0.1:6379> decr dage
(integer) -1
127.0.0.1:6379> get dage
"-1"
```
#### 14. decrby ­­
```
同decr，减指定值
```
```
127.0.0.1:6379> get age
(integer) 110
127.0.0.1:6379> decrby age 10
(integer) 100
127.0.0.1:6379> get age
"100"

127.0.0.1:6379> decrby dbage 10
(integer) -10
127.0.0.1:6379> get dbage
"-10"
```
#### 15. append
```
给指定key的字符串值追加value,返回新字符串值的长度。例如我们向name的值追加一个"redis"字符串:
```
```
127.0.0.1:6379> get name
"itheima"
127.0.0.1:6379> append name "_itcast"
(integer) 14
127.0.0.1:6379> get name
"itheima_itcast"
```