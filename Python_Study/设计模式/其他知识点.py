#!urs/bin/env python
#coding:utf-8

# 顺序
'''
1. 简单工厂模式
2. 策略模式
3. 装饰模式
4. 代理模式
5. 工厂方法模式
6. 原型模式
7. 模板方法模式
8. 外观模式
9. 建造者模式
10. 观察者模式
11. 抽象工厂模式
12. 状态模式
13. 适配器模式
14. 备忘录模式
15. 组合模式
16. 迭代器模式
17. 单例模式
18. 桥接模式
19. 命令模式
20. 职责链模式
21. 中介者模式
22. 享元模式
23. 解释器模式
24. 访问者模式
'''


# 单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。
# 如果一个类承担的职责过多，就等于把这些职责耦合到了一起，一个职责的变化可能会削弱或者
# 抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设置，当变化发送时，设计会遭受到
# 意想不到的破坏[ASD]。
# 软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离[ASD]。如果能想到多余一
# 个的动机去修改一个类，那么这个类就具有多余一个的职责[ASD]。


# 开放-封闭原则：软件实体（类、模块、函数等）应该可以扩展，但是不可修改[ASD]。
# 这个原则的核心就是：对于扩展是开放的，而对于更改是封闭的[ASD]。
# 无论模块是多么的“封闭”，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员
# 必须对他设计的模块应该对哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，
# 然后构造抽象来隔离那些变化[ASD]。
# 开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术声称的巨大
# 好处，也就是可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化
# 的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象并不是一个好主意。
# 拒绝不成熟的抽象和抽象本身一样重要[ASD]。


# 依赖倒换原则：A. 高层模块不应该依赖低层模块。两个都应该依赖抽象。
# B. 抽象不应该依赖细节。细节应该依赖抽象。
# 里氏代换原则（LSP）：子类型必须能够替换掉它们的父类型。[ASD]
# 也就是说一个软件实体如果使用一个父类的话，那么一定适用于其子类，而且它察觉不出父类
# 对象和子类的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。
# 依赖倒转其实可以说是面向对象设计的标志，如果编写时考虑的都是如何针对抽象编程而不是
# 针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，
# 反之就是过程化的设计了[ASD]。


# 迪米特法则（最少知识原则）：如果两个类不彼此直接通信，那么这两个类就不应当发生直接
# 的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个
# 调用。




# Base
'''
1. 类与实例
2. 构造方法
3. 方法重载
4. 属性与修饰符
5. 封装
6. 继承
7. 多态
8. 重构
9. 抽象类
10. 接口
11. 集合
12. 泛型
泛型是具有占位符（类型参数）的类、结构、接口和方法，这些占位符是类、结构、接口和方法所
存储或使用的一个或多个类型的占位符。泛型结合类可以将类型参数用作它存储的对象的类型的
占位符；类型参数作为其字段的类型和其方法的参数类型出现[MSDN]。
13. 委托与事件
委托是对函数的封装，可以当作给方法的特征指定一个名称。而事件则是委托的一种特殊形式，
当发生有意义的事情时，事件对象处理通知过程[PC#]。
'''
